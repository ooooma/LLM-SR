{"sample_order": 46, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\" Mathematical function for acceleration in a driven nonlinear oscillator\n    \n    Args:\n        time: A numpy array representing time.\n        position: A numpy array representing observations of current position.\n        velocity: A numpy array representing observations of velocity.\n        constants: Array of numeric constants or parameters to be optimized\n        \n    Returns:\n        A numpy array representing acceleration as the result of applying the mathematical model to the inputs.\n    \"\"\"\n    \n    # Make sure `constants` are not None and have right dimensionality\n    if constants is None or len(constants) < MAX_NPARAMS:\n        constants = PRAMS_INIT\n    \n    # Define the acceleration according the driving force and damping\n    acceleration = constants[0] * np.sin(time) + constants[1] * np.sin(position) + constants[2] * velocity**2 + constants[3] \n    return acceleration\n\n", "score": null}