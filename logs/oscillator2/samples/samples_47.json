{"sample_order": 47, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Improved version of `equation_v0`.\n    \n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n    \n    Returns:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    # Acc = A(t, x) * t + B(x, v) * x + C(v) * v + D(t, x, v) * constant\n    dv_dt = (params[0] * t + params[1] * x + params[2] * v) * t\n    dv_dx = (params[3] * x + params[4] * v) * x\n    dvdv = params[5] * v * v\n    dv_dct = params[6] * t * x * v\n    \n    return dv_dt + dv_dx + dvdv + dv_dct\n\n", "score": -0.035563732045221105}