{"sample_order": 87, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"\n    A more comprehensive mathematical representation of acceleration incorporating linear damping, nonlinear damping, driving force, and potential energy gradient effects.\n    \n    Args:\n        time: Array representing time points.\n        position: Array representing positions at each time point.\n        velocity: Array representing velocities at each time point.\n        params: Array of parameters representing constants for linear/damping coefficients, driving forces & potential gradients.\n    \n    Returns:\n        An array representing acceleration at each time point, derived from the given mathematical model components.\n    \"\"\"\n    linear_damping_constant = params[0]\n    nonlinear_damping_coeff = params[1]\n    driving_force_const = params[2]\n    potential_energy_gradient = params[3]\n    \n    # Incorporating linear damping effect directly proportional to velocity\n    linear_damp_term = linear_damping_constant * velocity\n    \n    # Nonlinear damping effect (e.g., quadratic in velocity)\n    nonlinear_damp_term = nonlinear_damping_coeff * np.power(velocity, 2)\n    \n    # Driven force effect\n    driven_force_term = driving_force_const * position\n    \n    # Potential energy gradient effect on velocity\n    potential_grad_term = potential_energy_gradient * velocity * position\n    \n    # Total acceleration in the system\n    acceleration = linear_damp_term + nonlinear_damp_term + driven_force_term + potential_grad_term\n    return acceleration\n\n", "score": null}