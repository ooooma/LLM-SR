{"sample_order": 102, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Simulates performance of given campaign strategies based on the time series.\n    \n    Args:\n        strategies: A dictionary where keys represent strategy IDs and values are the strategies themselves.\n        time_series: A list of time values representing the time periods.\n    \n    Returns:\n        A dictionary where keys are strategy IDs and values are simulation outputs for each time period.\n    \"\"\"\n    outputs = {}\n    \n    if strategies is None or time_series is None:\n        raise ValueError(\"either strategies or time_series should not be None\")\n    \n    for strategy_id, strategy in strategies.items():\n        outputs[strategy_id] = []\n        \n        for time_period in time_series:\n            performance = strategy(time_period)\n            outputs[strategy_id].append(performance)\n\n", "score": null}