{"sample_order": 67, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n    \n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n    \n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    if isinstance(params, list):\n        params = np.array(params)\n    \n    if params.ndim == 1:\n        acc = params[0] * t + params[1] * x + params[2] * v + params[3]\n    else:\n        acc = np.array([])\n        for idx, _ in enumerate(t):\n            acc = np.append(acc, params[0,idx] * t[idx] + params[1,idx] * x[idx] + params[2,idx] * v[idx] + params[3,idx])\n\n", "score": null}