{"sample_order": 90, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"\n    Finds acceleration in a damped nonlinear oscillator system.\n    \n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized.\n    \n    Returns:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    gamma = params[0]\n    omega_n = params[1]\n    f = params[2]\n    A = params[3]\n    \n    # equation for Acceleration\n    a = -gamma * v[:] - omega_n**2 * x[:] + f * np.cos(omega_n * t) + A * np.sin(omega_n * t)\n    return a\n\n", "score": -0.03135667664681379}