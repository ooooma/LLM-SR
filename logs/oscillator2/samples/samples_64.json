{"sample_order": 64, "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Improved version of `equation_v1`.\"\"\"\n    theta = params[0]  # constant related angular frequency\n    t = t[:len(v)]\n    dt = t[1:] - t[:-1]  # time step\n    inv_sqrt_t = 1 / np.sqrt(t)\n    sqrt_inv_sqrt_t = np.sqrt(inv_sqrt_t)\n    \n    # Generate the corrected RHS term\n    rhs_term = params[1] * np.sum(inv_sqrt_t * sqrt_inv_sqrt_t * v) / params[0]\n    rhs_term += params[3] * np.sum(inv_sqrt_t * sqrt_inv_sqrt_t * v[:len(v)-1]) / params[4]\n    \n    # Define the left-hand side term\n    lhs_term = -params[2] * v + theta * v\n    lhs_term = lhs_term[1:] - lhs_term[:-1] / dt\n\n", "score": null}