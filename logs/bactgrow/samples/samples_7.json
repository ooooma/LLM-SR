{"sample_order": 7, "function": "def equation(b: np.ndarray, s: np.ndarray, temp: np.ndarray, pH: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for bacterial growth rate\n\n    Args:\n        b: A numpy array representing observations of population density of the bacterial species.\n        s: A numpy array representing observations of substrate concentration.\n        temp: A numpy array representing observations of temperature.\n        pH: A numpy array representing observations of pH level.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing bacterial growth rate as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Improved mathematical function for bacterial growth rate\n    \n    Args:\n        b: A numpy array representing observations of population density.\n        s: A numpy array representing observations of substrate concentration.\n        temp: A numpy array representing observations of temperature.\n        pH: A numpy array representing observations of pH level.\n        params: Array of numeric constants or parameters to be optimized.\n    \n    Return:\n        A numpy array representing bacterial growth rate as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \n    # Growth factor due to substrate, with saturation at high levels\n    growth_factor_s = params[1] * s / (1 + params[6] * s)\n    \n    # Temperature effect modeled by a Gaussian peak\n    temp_effect = np.exp(-(temp - params[7])**2 / (2*params[8]**2))\n    \n    # pH effect modeled similarly to temperature\n    pH_effect = np.exp(-(pH - params[9])**2 / (2*params[10]**2))\n    \n    return (\n        params[0] * b + \n        growth_factor_s +\n        params[2] * temp_effect + \n        params[3] * pH_effect -\n        params[5] * b**2\n    )\n\n", "score": null}