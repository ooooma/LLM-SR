{"sample_order": 13, "function": "def equation(b: np.ndarray, s: np.ndarray, temp: np.ndarray, pH: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for bacterial growth rate\n\n    Args:\n        b: A numpy array representing observations of population density of the bacterial species.\n        s: A numpy array representing observations of substrate concentration.\n        temp: A numpy array representing observations of temperature.\n        pH: A numpy array representing observations of pH level.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing bacterial growth rate as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\" Improved version of `equation_v0` with interaction terms.\"\"\"\n    \n    # Logistic growth component\n    b_max = params[0]\n    K = params[1]\n    logistic_growth_rate = b_max * b * (1 - b/K)\n    \n    # Substrate limitation adjustment\n    s_opt = params[2]\n    substrate_adjustment = 1 - np.exp(-s / s_opt)\n    \n    # Temperature effect, including an interaction term between temperature and pH.\n    temp_opt = params[3] \n    pH_opt = params[4]\n    temperature_effect = np.exp(-(temp - temp_opt)**2 / (params[5]**2))\n    \n    # pH effect\n    pH_effect = np.exp(-(pH - pH_opt)**2 / (params[6]**2))\n    \n    # Interaction between temperature and pH effects to capture complex dependencies.\n    interaction_term = params[7] * temperature_effect * pH_effect\n    \n    # Growth rate combining all components\n    growth_rate = logistic_growth_rate * substrate_adjustment * (temperature_effect + interaction_term) * pH_effect\n    \n    return growth_rate\n\n", "score": -0.02090771877076794}